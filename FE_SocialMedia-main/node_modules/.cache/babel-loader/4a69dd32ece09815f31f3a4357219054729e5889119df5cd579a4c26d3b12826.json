{"ast":null,"code":"import axios from 'axios';\n\n// Tạo bài viết mới (chỉ 1 file)\nexport const createPost = async (userId, content, mediaFile) => {\n  const formData = new FormData();\n  formData.append(\"userid\", userId);\n  formData.append(\"content\", content);\n  if (mediaFile) {\n    console.log(\"Appending single file:\", mediaFile);\n    formData.append(\"mediaFile\", mediaFile); // Chỉ append 1 file\n  }\n\n  // Debug: Kiểm tra FormData trước khi gửi\n  console.log(\"FormData Entries:\");\n  for (let [key, value] of formData.entries()) {\n    console.log(key, value instanceof File ? `${value.name} (${value.size} bytes)` : value);\n  }\n  try {\n    const response = await axios.post(`/api/posts/create`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Error creating post:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n// // Chỉnh sửa bài viết\n// export const editPost = async(postId, content, mediaFiles) => {\n//     const formData = new FormData();\n//     formData.append(\"content\", content);\n\n//     if(mediaFiles){\n//         mediaFiles.forEach((file)=>{\n//             formData.append(\"mediaFiles\", file);\n//         });\n//       }\n\n//       const response = await axios.post(`/api/posts/update/${postId}`, formData, {\n//         headers: {\"Content-Type\":\"multipart/form-data\"}\n//       });\n//       return response.data; \n\n// };\n\n// // Xóa bài viết\n// export const removePost = async(postId) => {\n//     const response = await axios.delete(`/api/posts/delete/${postId}`);\n//     return response.data;\n// };\n\n// Like/unlike bài viết (POST /api/likes)\nexport const toggleLikeAPI = async (postId, userId) => {\n  try {\n    const response = await axios.post(`/api/likes`, {\n      userId,\n      postId\n    });\n    console.log(\"Like API Response:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Like API Error:\", error);\n    return {\n      success: false,\n      error: \"Failed to like post\"\n    };\n  }\n};\n\n// // Lấy danh sách like của bài viết \n// export const getPostLikes = async (postId) => {\n//   try {\n//     const response = await axios.get(`/api/posts/${postId}/likes`);\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Get likes error:\", error);\n//     return [];\n//   }\n// };\n\n// Bình luận bài viết\nexport const createCommentAPI = async (postId, userId, comment) => {\n  const response = await axios.post(`/api/posts/comment`, {\n    postId,\n    userId,\n    comment\n  });\n  return response.data;\n};\n\n// // Chia sẻ bài viết\n// export const sharePost = async(postId, userId) => {\n//     const response = await axios.post(`/api/posts/share`, {postId, userId});\n//     return response.data;\n// };\n\n// Lấy danh sách bài viết\nexport const getPosts = async userId => {\n  try {\n    const response = await axios.get(`/api/posts?userid=${userId}`);\n    console.log(\"API Response:\", response.data); // Log dữ liệu từ API\n    return response.data;\n  } catch (error) {\n    console.error(\"API Error:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","createPost","userId","content","mediaFile","formData","FormData","append","console","log","key","value","entries","File","name","size","response","post","headers","data","error","_error$response","message","toggleLikeAPI","postId","success","createCommentAPI","comment","getPosts","get"],"sources":["D:/code/XDPMTMHPL/doan/FE_SocialMedia-main/src/api/PostAPI.js"],"sourcesContent":["import axios from 'axios';\n\n// Tạo bài viết mới (chỉ 1 file)\nexport const createPost = async (userId, content, mediaFile) => {\n  const formData = new FormData();\n  formData.append(\"userid\", userId);\n  formData.append(\"content\", content);\n\n  if (mediaFile) {\n    console.log(\"Appending single file:\", mediaFile);\n    formData.append(\"mediaFile\", mediaFile); // Chỉ append 1 file\n  }\n\n  // Debug: Kiểm tra FormData trước khi gửi\n  console.log(\"FormData Entries:\");\n  for (let [key, value] of formData.entries()) {\n    console.log(key, value instanceof File ? `${value.name} (${value.size} bytes)` : value);\n  }\n\n  try {\n    const response = await axios.post(`/api/posts/create`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error creating post:\", error.response?.data || error.message);\n    throw error;\n  }\n};\n\n// // Chỉnh sửa bài viết\n// export const editPost = async(postId, content, mediaFiles) => {\n//     const formData = new FormData();\n//     formData.append(\"content\", content);\n\n//     if(mediaFiles){\n//         mediaFiles.forEach((file)=>{\n//             formData.append(\"mediaFiles\", file);\n//         });\n//       }\n    \n//       const response = await axios.post(`/api/posts/update/${postId}`, formData, {\n//         headers: {\"Content-Type\":\"multipart/form-data\"}\n//       });\n//       return response.data; \n\n// };\n\n// // Xóa bài viết\n// export const removePost = async(postId) => {\n//     const response = await axios.delete(`/api/posts/delete/${postId}`);\n//     return response.data;\n// };\n\n// Like/unlike bài viết (POST /api/likes)\nexport const toggleLikeAPI = async (postId, userId) => {\n  try {\n    const response = await axios.post(`/api/likes`, { userId, postId});\n    console.log(\"Like API Response:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Like API Error:\", error);\n    return { success: false, error: \"Failed to like post\" };\n  }\n};\n\n// // Lấy danh sách like của bài viết \n// export const getPostLikes = async (postId) => {\n//   try {\n//     const response = await axios.get(`/api/posts/${postId}/likes`);\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Get likes error:\", error);\n//     return [];\n//   }\n// };\n\n// Bình luận bài viết\nexport const createCommentAPI = async(postId, userId, comment) => {\n    const response = await axios.post(`/api/posts/comment`, {postId, userId, comment});\n    return response.data;\n};\n\n// // Chia sẻ bài viết\n// export const sharePost = async(postId, userId) => {\n//     const response = await axios.post(`/api/posts/share`, {postId, userId});\n//     return response.data;\n// };\n\n// Lấy danh sách bài viết\nexport const getPosts = async (userId) => {\n  try {\n      const response = await axios.get(`/api/posts?userid=${userId}`);\n      console.log(\"API Response:\", response.data); // Log dữ liệu từ API\n      return response.data;\n  } catch (error) {\n      console.error(\"API Error:\", error);\n      return [];\n  }\n};\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}